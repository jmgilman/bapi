{"openapi": "3.0.2", "info": {"title": "Beancount API", "description": "\nThe Beancount API (bapi) provides an HTTP API for viewing data derived from a\nBeancount ledger file. It aims to provide as much of the underlying data as\npossible in responses in order to maximize integration with other platforms.\n", "contact": {"name": "Joshua Gilman", "email": "joshuagilman@gmail.com"}, "license": {"name": "MIT", "url": "https://opensource.org/licenses/MIT"}, "version": "0.1.0"}, "paths": {"/account/": {"get": {"tags": ["accounts"], "summary": "Fetch a list of all account names", "operationId": "accounts_account__get", "parameters": [{"description": "A string to search across results with", "required": false, "schema": {"title": "Search", "type": "string", "description": "A string to search across results with"}, "example": "Assets", "name": "search", "in": "query"}], "responses": {"200": {"description": "A list of all account names.", "content": {"application/json": {"schema": {"title": "Response Accounts Account  Get", "type": "array", "items": {"type": "string"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/account/{account_name}": {"get": {"tags": ["accounts"], "summary": "Fetch the details of an account.", "operationId": "account_account__account_name__get", "parameters": [{"description": "The account name to lookup", "required": true, "schema": {"title": "Account Name", "type": "string", "description": "The account name to lookup"}, "name": "account_name", "in": "path"}], "responses": {"200": {"description": "An `Account` containing the given account details.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Account"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/account/{account_name}/balance": {"get": {"tags": ["accounts"], "summary": "Fetch the balance of an account.", "operationId": "balance_account__account_name__balance_get", "parameters": [{"description": "The account name to lookup", "required": true, "schema": {"title": "Account Name", "type": "string", "description": "The account name to lookup"}, "name": "account_name", "in": "path"}], "responses": {"200": {"description": "A mapping of currencies to lists of positions.", "content": {"application/json": {"schema": {"title": "Response Balance Account  Account Name  Balance Get", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/Inventory"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/account/{account_name}/realize": {"get": {"tags": ["accounts"], "summary": "Fetch the result of realizing an account.", "operationId": "realize_account__account_name__realize_get", "parameters": [{"description": "The account name to lookup", "required": true, "schema": {"title": "Account Name", "type": "string", "description": "The account name to lookup"}, "name": "account_name", "in": "path"}], "responses": {"200": {"description": "The raw results from calling realization.realize().", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RealAccount"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/account/{account_name}/transactions": {"get": {"tags": ["accounts"], "summary": "Fetches all transactions associated with an account.", "operationId": "transactions_account__account_name__transactions_get", "parameters": [{"description": "The account name to lookup", "required": true, "schema": {"title": "Account Name", "type": "string", "description": "The account name to lookup"}, "name": "account_name", "in": "path"}, {"description": "A JMESPath filter to apply to the results", "required": false, "schema": {"title": "Filter", "type": "string", "description": "A JMESPath filter to apply to the results"}, "example": "[?date > `2022-01-01`]", "name": "filter", "in": "query"}, {"description": "A string to search across results with", "required": false, "schema": {"title": "Search", "type": "string", "description": "A string to search across results with"}, "example": "Home Depot", "name": "search", "in": "query"}, {"description": "Which operation should happen first: filter or search", "required": false, "schema": {"allOf": [{"$ref": "#/components/schemas/MutatePriority"}], "description": "Which operation should happen first: filter or search", "default": "filter"}, "name": "priority", "in": "query"}], "responses": {"200": {"description": "A list of transactions.", "content": {"application/json": {"schema": {"title": "Response Transactions Account  Account Name  Transactions Get", "type": "array", "items": {"$ref": "#/components/schemas/Transaction"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/directive/": {"get": {"tags": ["directives"], "summary": "Fetches all directives in the beancount ledger.", "operationId": "directives_directive__get", "parameters": [{"description": "A JMESPath filter to apply to the results", "required": false, "schema": {"title": "Filter", "type": "string", "description": "A JMESPath filter to apply to the results"}, "example": "[?date > `2022-01-01`]", "name": "filter", "in": "query"}, {"description": "A string to search across results with", "required": false, "schema": {"title": "Search", "type": "string", "description": "A string to search across results with"}, "example": "Home Depot", "name": "search", "in": "query"}, {"description": "Which operation should happen first: filter or search", "required": false, "schema": {"allOf": [{"$ref": "#/components/schemas/MutatePriority"}], "description": "Which operation should happen first: filter or search", "default": "filter"}, "name": "priority", "in": "query"}], "responses": {"200": {"description": "A list of all directives.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Directives"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/directive/{directive}": {"get": {"tags": ["directives"], "summary": "Fetches all directives of the requested type.", "operationId": "directive_directive__directive__get", "parameters": [{"description": "The type of directive to fetch", "required": true, "schema": {"allOf": [{"$ref": "#/components/schemas/DirectiveType"}], "description": "The type of directive to fetch"}, "name": "directive", "in": "path"}, {"description": "A JMESPath filter to apply to the results", "required": false, "schema": {"title": "Filter", "type": "string", "description": "A JMESPath filter to apply to the results"}, "example": "[?date > `2022-01-01`]", "name": "filter", "in": "query"}, {"description": "A string to search across results with", "required": false, "schema": {"title": "Search", "type": "string", "description": "A string to search across results with"}, "example": "Home Depot", "name": "search", "in": "query"}, {"description": "Which operation should happen first: filter or search", "required": false, "schema": {"allOf": [{"$ref": "#/components/schemas/MutatePriority"}], "description": "Which operation should happen first: filter or search", "default": "filter"}, "name": "priority", "in": "query"}], "responses": {"200": {"description": "A list of all directives of the requested type.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Directives"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/directive/id/{id}": {"get": {"tags": ["directives"], "summary": "Fetches a directive by ID.", "operationId": "directive_id_directive_id__id__get", "parameters": [{"description": "The ID of the directive to fetch.", "required": true, "schema": {"title": "Id", "type": "string", "description": "The ID of the directive to fetch."}, "name": "id", "in": "path"}], "responses": {"200": {"description": "The associated directive.", "content": {"application/json": {"schema": {"title": "Response Directive Id Directive Id  Id  Get", "anyOf": [{"$ref": "#/components/schemas/Balance"}, {"$ref": "#/components/schemas/Close"}, {"$ref": "#/components/schemas/Commodity"}, {"$ref": "#/components/schemas/Custom"}, {"$ref": "#/components/schemas/Document"}, {"$ref": "#/components/schemas/Event"}, {"$ref": "#/components/schemas/Note"}, {"$ref": "#/components/schemas/Open"}, {"$ref": "#/components/schemas/Pad"}, {"$ref": "#/components/schemas/Price"}, {"$ref": "#/components/schemas/Query"}, {"$ref": "#/components/schemas/Transaction"}]}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/directive/syntax": {"post": {"tags": ["directives"], "summary": "Generate syntax for the given directive.", "operationId": "directive_syntax_directive_syntax_post", "requestBody": {"content": {"application/json": {"schema": {"title": "Data", "anyOf": [{"$ref": "#/components/schemas/Balance"}, {"$ref": "#/components/schemas/Close"}, {"$ref": "#/components/schemas/Commodity"}, {"$ref": "#/components/schemas/Custom"}, {"$ref": "#/components/schemas/Document"}, {"$ref": "#/components/schemas/Event"}, {"$ref": "#/components/schemas/Note"}, {"$ref": "#/components/schemas/Open"}, {"$ref": "#/components/schemas/Pad"}, {"$ref": "#/components/schemas/Price"}, {"$ref": "#/components/schemas/Query"}, {"$ref": "#/components/schemas/Transaction"}]}}}, "required": true}, "responses": {"200": {"description": "The Beancount syntax for the given directive.", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/file/": {"get": {"tags": ["file"], "summary": "Fetches the entire contents of the beancount ledger.", "operationId": "file_file__get", "responses": {"200": {"description": "A BeancountFile containing contents of the ledger.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BeancountFile"}}}}}}}, "/file/errors": {"get": {"tags": ["file"], "summary": "Fetches the errors generated from parsing the ledger.", "operationId": "errors_file_errors_get", "responses": {"200": {"description": "A list of errors generated from parsing the ledger.", "content": {"application/json": {"schema": {"title": "Response Errors File Errors Get", "type": "array", "items": {"type": "string"}}}}}}}}, "/file/options": {"get": {"tags": ["file"], "summary": "Fetches the options from the beancount ledger.", "operationId": "options_file_options_get", "responses": {"200": {"description": "An Options containing the ledger options.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Options"}}}}}}}, "/query/": {"get": {"tags": ["query"], "summary": "Query the beancount data using a BQL query string.", "operationId": "query_query__get", "parameters": [{"description": "The BQL query string", "required": false, "schema": {"title": "Bql", "type": "string", "description": "The BQL query string", "default": ""}, "name": "bql", "in": "query"}], "responses": {"200": {"description": "A QueryResult containing results of the query.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueryResult"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/realize/": {"get": {"tags": ["realize"], "summary": "Perform a realization on the ledger contents.", "operationId": "realize_realize__get", "responses": {"200": {"description": "RealAccount holding the results of the realizaiton.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RealAccount"}}}}}}}}, "components": {"schemas": {"Account": {"title": "Account", "required": ["balance", "name", "open"], "type": "object", "properties": {"balance": {"title": "Balance", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/Inventory"}}, "close": {"title": "Close", "type": "string", "format": "date"}, "name": {"title": "Name", "type": "string"}, "open": {"title": "Open", "type": "string", "format": "date"}}, "description": "A simplified view of an entire beancount account.\n\nThe primary differenece between this and a `RealAccount` is that it strips\nout all children and directives associated with the account. Additionally,\nit added some useful data about an account like open/close date. The\nremoval of the children and directives greatly reduces the size of this\nobject, especially when serialized.\n\nAttributes:\n    balance: A mapping of currencies to inventories.\n    close: The (optional) date the account was closed.\n    name: The account name.\n    open: The date the account was opened."}, "Amount": {"title": "Amount", "type": "object", "properties": {"ty": {"title": "Ty", "enum": ["Amount"], "type": "string", "default": "Amount"}, "number": {"title": "Number", "type": "number"}, "currency": {"title": "Currency", "type": "string"}}, "description": "A model representing a `beancount.core.amount.Amount`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    number: The value of the amount.\n    currency: The amount currency."}, "Balance": {"title": "Balance", "required": ["date", "account", "amount"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Balance"], "type": "string", "default": "Balance"}, "account": {"title": "Account", "type": "string"}, "amount": {"$ref": "#/components/schemas/Amount"}, "tolerance": {"title": "Tolerance", "type": "number"}, "diff_amount": {"$ref": "#/components/schemas/Amount"}}, "description": "A model representing a `beancount.core.data.Balance`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    account: The account whose balance to check at the given date.\n    amount: The number of expected units for the account at the given date.\n    diff_amount: The difference between the expected and actual amounts.\n    tolerance: The amount of tolerance to use in the verification."}, "BeancountFile": {"title": "BeancountFile", "required": ["entries", "options", "errors", "accounts"], "type": "object", "properties": {"entries": {"$ref": "#/components/schemas/Directives"}, "options": {"$ref": "#/components/schemas/Options"}, "errors": {"title": "Errors", "type": "array", "items": {}}, "accounts": {"title": "Accounts", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/Account"}}}, "description": "A model representing the contents of an entire beancount file.\n\nThis model provides an interface for accessing the result returned when\nloading the contents of a beancount file. It's constructor can be fed the\n(entries, errors, options) tuple often returned from loader functions.\n\nAttributes:\n    entries: The directives parsed from the beancount file.\n    options: The options parsed from the beancount file.\n    errors: Any errors generated during parsing.\n    accounts: A dictionary of account names to `Account` instances"}, "Booking": {"title": "Booking", "enum": ["STRICT", "NONE", "AVERAGE", "FIFO", "LIFO"], "description": "An enumeration."}, "Close": {"title": "Close", "required": ["date", "account"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Close"], "type": "string", "default": "Close"}, "account": {"title": "Account", "type": "string"}}, "description": "A model representing a `beancount.core.data.Close`.\nAttributes:\n    ty: A string literal identifying this model.\n    account: The name of the account being closed."}, "Commodity": {"title": "Commodity", "required": ["date", "currency"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Commodity"], "type": "string", "default": "Commodity"}, "currency": {"title": "Currency", "type": "string"}}, "description": "A model representing a `beancount.core.data.Commodity`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    currency: The commodity under consideration."}, "Cost": {"title": "Cost", "required": ["number", "currency", "date"], "type": "object", "properties": {"ty": {"title": "Ty", "enum": ["Cost"], "type": "string", "default": "Cost"}, "number": {"title": "Number", "type": "number"}, "currency": {"title": "Currency", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "label": {"title": "Label", "type": "string"}}, "description": "A model representing a `beancount.core.position.Cost`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    number: The per-unit cost.\n    currency: The cost currency.\n    date: A date that the lot was created at.\n    label: An optional label for the lot."}, "CostSpec": {"title": "CostSpec", "type": "object", "properties": {"ty": {"title": "Ty", "enum": ["CostSpec"], "type": "string", "default": "CostSpec"}, "number_per": {"title": "Number Per", "type": "number"}, "number_total": {"title": "Number Total", "type": "number"}, "currency": {"title": "Currency", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "label": {"title": "Label", "type": "string"}, "merge": {"title": "Merge", "type": "boolean"}}, "description": "A model representing a `beancount.core.position.CostSpec`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    number_per: The cost/price per unit.\n    number_total: The total cost/price, or None if unspecified.\n    currency: The commodity of the amount.\n    date: A date for the lot.\n    label: An optional label for the lot.\n    merge: True if this specification calls for averaging the units of this\n        lot's currency, or False if unspecified."}, "Custom": {"title": "Custom", "required": ["date", "type", "values"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Custom"], "type": "string", "default": "Custom"}, "type": {"title": "Type", "type": "string"}, "values": {"title": "Values", "type": "array", "items": {}}}, "description": "A model representing a `beancount.core.data.Custom`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    type: The type of this custom directive.\n    values: A list of values of simple types supported by the grammar."}, "DirectiveType": {"title": "DirectiveType", "enum": ["balance", "close", "commodity", "custom", "document", "event", "note", "open", "pad", "price", "query", "transaction"], "type": "string", "description": "An enum of valid values when specifying a directive type."}, "Directives": {"title": "Directives", "type": "array", "items": {"anyOf": [{"$ref": "#/components/schemas/Balance"}, {"$ref": "#/components/schemas/Close"}, {"$ref": "#/components/schemas/Commodity"}, {"$ref": "#/components/schemas/Custom"}, {"$ref": "#/components/schemas/Document"}, {"$ref": "#/components/schemas/Event"}, {"$ref": "#/components/schemas/Note"}, {"$ref": "#/components/schemas/Open"}, {"$ref": "#/components/schemas/Pad"}, {"$ref": "#/components/schemas/Price"}, {"$ref": "#/components/schemas/Query"}, {"$ref": "#/components/schemas/Transaction"}]}, "description": "A model representing a list of directives.\n\nThis models wraps the entries response often returned when loading the\ncontent of a beancount file. It holds a list of various valid directive\nmodels."}, "DisplayContext": {"title": "DisplayContext", "required": ["ccontexts", "commas"], "type": "object", "properties": {"ty": {"title": "Ty", "enum": ["DisplayContext"], "type": "string", "default": "DisplayContext"}, "ccontexts": {"title": "Ccontexts", "type": "object"}, "commas": {"title": "Commas", "type": "boolean"}}, "description": "A model representing a `beancount.core.display_context.DisplayContext`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    ccontexts: A dict of currency string to CurrencyContext instances.\n    commas: True if we should render commas."}, "Document": {"title": "Document", "required": ["date", "account", "filename"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Document"], "type": "string", "default": "Document"}, "account": {"title": "Account", "type": "string"}, "filename": {"title": "Filename", "type": "string"}, "tags": {"title": "Tags", "uniqueItems": true, "type": "array", "items": {}}, "links": {"title": "Links", "uniqueItems": true, "type": "array", "items": {}}}, "description": "A model representing a `beancount.core.data.Document`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    account: The account the document is associated with.\n    filename: The absolute filename of the document.\n    tags: A set of tag strings.\n    links: A set of link strings."}, "Event": {"title": "Event", "required": ["date", "type", "description"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Event"], "type": "string", "default": "Event"}, "type": {"title": "Type", "type": "string"}, "description": {"title": "Description", "type": "string"}}, "description": "A model representing a `beancount.core.data.Event`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    type: A unique string identifying this event.\n    description: The value of the above type at the given date."}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "Inventory": {"title": "Inventory", "type": "array", "items": {"$ref": "#/components/schemas/Position"}, "description": "A model representing a `beancount.core.inventory.Inventory`.\n\nA beancount inventory mimics a dictionary, but ultimately the data\nunderlying it is a list of Positions. This model represents this fact by\nwrapping a list of [Position][bdantic.models.data.Position] models. It\ninherits basic list functionality and can be indexed/iterated over."}, "Meta": {"title": "Meta", "type": "object", "properties": {"filename": {"title": "Filename", "type": "string"}, "lineno": {"title": "Lineno", "type": "integer"}, "__tolerances__": {"title": "  Tolerances  ", "type": "object", "additionalProperties": {"type": "number"}}}, "description": "Represents the metadata attached to a directive.\n\nMost directives share common metadata fields, namely the filename and line\nnumber in which they occur. This model provides access to those common\nfields but is also configured to accept any other variable number of fields\nthat may be attached to a directive.\n\nAttributes:\n    filename: The name of the file the direcive is located in\n    lineno: The line number the directive is located on\n    tolerances: A lookup dictionary for fetching currency tolerances."}, "MutatePriority": {"title": "MutatePriority", "enum": ["filter", "search"], "type": "string", "description": "An enum controlling the order in which filtering/searching occurs."}, "Note": {"title": "Note", "required": ["date", "account", "comment"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Note"], "type": "string", "default": "Note"}, "account": {"title": "Account", "type": "string"}, "comment": {"title": "Comment", "type": "string"}}, "description": "A model representing a `beancount.core.data.Note`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    account: The account this note is attached to.\n    comment: The string contents of the note."}, "Open": {"title": "Open", "required": ["date", "account"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Open"], "type": "string", "default": "Open"}, "account": {"title": "Account", "type": "string"}, "currencies": {"title": "Currencies", "type": "array", "items": {"type": "string"}}, "booking": {"$ref": "#/components/schemas/Booking"}}, "description": "A model representing a `beancount.core.data.Open`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    account: The name of the account being opened.\n    currencies: Currencies that are allowed in this account.\n    booking: Booking method used to disambiguate postings to this account."}, "Options": {"title": "Options", "type": "object", "properties": {"account_current_conversions": {"title": "Account Current Conversions", "type": "string"}, "account_current_earnings": {"title": "Account Current Earnings", "type": "string"}, "account_previous_balances": {"title": "Account Previous Balances", "type": "string"}, "account_previous_conversions": {"title": "Account Previous Conversions", "type": "string"}, "account_previous_earnings": {"title": "Account Previous Earnings", "type": "string"}, "account_rounding": {"title": "Account Rounding", "type": "string"}, "allow_deprecated_none_for_tags_and_links": {"title": "Allow Deprecated None For Tags And Links", "type": "boolean"}, "allow_pipe_separator": {"title": "Allow Pipe Separator", "type": "boolean"}, "booking_method": {"$ref": "#/components/schemas/Booking"}, "commodities": {"title": "Commodities", "uniqueItems": true, "type": "array", "items": {"type": "string"}}, "conversion_currency": {"title": "Conversion Currency", "type": "string"}, "dcontext": {"$ref": "#/components/schemas/DisplayContext"}, "documents": {"title": "Documents", "type": "array", "items": {"type": "string"}}, "experiment_explicit_tolerances": {"title": "Experiment Explicit Tolerances", "type": "boolean"}, "filename": {"title": "Filename", "type": "string"}, "include": {"title": "Include", "type": "array", "items": {"type": "string"}}, "infer_tolerance_from_cost": {"title": "Infer Tolerance From Cost", "type": "boolean"}, "inferred_tolerance_default": {"title": "Inferred Tolerance Default", "type": "object", "additionalProperties": {"type": "number"}}, "inferred_tolerance_multiplier": {"title": "Inferred Tolerance Multiplier", "type": "number"}, "input_hash": {"title": "Input Hash", "type": "string"}, "insert_pythonpath": {"title": "Insert Pythonpath", "type": "boolean"}, "long_string_maxlines": {"title": "Long String Maxlines", "type": "integer"}, "name_assets": {"title": "Name Assets", "type": "string"}, "name_equity": {"title": "Name Equity", "type": "string"}, "name_expenses": {"title": "Name Expenses", "type": "string"}, "name_income": {"title": "Name Income", "type": "string"}, "name_liabilities": {"title": "Name Liabilities", "type": "string"}, "operating_currency": {"title": "Operating Currency", "type": "array", "items": {"type": "string"}}, "plugin": {"title": "Plugin", "type": "array", "items": {"type": "string"}}, "plugin_processing_mode": {"title": "Plugin Processing Mode", "type": "string"}, "render_commas": {"title": "Render Commas", "type": "boolean"}, "tolerance": {"title": "Tolerance", "type": "number"}, "title": {"title": "Title", "type": "string"}, "use_legacy_fixed_tolerances": {"title": "Use Legacy Fixed Tolerances", "type": "boolean"}}, "description": "A model representing ledger options.\n\nThis model wraps the options contained within a ledger. Options which\ncontain raw beancount types are automatically parsed into their respective\nmodel.\n\nSee the docs for more details about each field:\nhttps://beancount.github.io/docs/beancount_options_reference.html"}, "Pad": {"title": "Pad", "required": ["date", "account", "source_account"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Pad"], "type": "string", "default": "Pad"}, "account": {"title": "Account", "type": "string"}, "source_account": {"title": "Source Account", "type": "string"}}, "description": "A model representing a `beancount.core.data.Pad`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    account: The name of the account which needs to be filled.\n    source_account: The name of the account used for debiting."}, "Position": {"title": "Position", "required": ["units"], "type": "object", "properties": {"ty": {"title": "Ty", "enum": ["Position"], "type": "string", "default": "Position"}, "units": {"$ref": "#/components/schemas/Amount"}, "cost": {"$ref": "#/components/schemas/Cost"}}, "description": "A model representing a `beancount.core.position.Position`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    units: The number of units and its currency.\n    cost: A Cost that represents the lot."}, "Posting": {"title": "Posting", "required": ["account"], "type": "object", "properties": {"ty": {"title": "Ty", "enum": ["Posting"], "type": "string", "default": "Posting"}, "account": {"title": "Account", "type": "string"}, "units": {"$ref": "#/components/schemas/Amount"}, "cost": {"title": "Cost", "anyOf": [{"$ref": "#/components/schemas/Cost"}, {"$ref": "#/components/schemas/CostSpec"}]}, "price": {"$ref": "#/components/schemas/Amount"}, "flag": {"title": "Flag", "type": "string"}, "meta": {"title": "Meta", "type": "object"}}, "description": "A model representing a `beancount.core.data.Posting`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    account: The account that is modified by this posting.\n    units: The units of the position.\n    cost: The cost of the position.\n    price: The optional price at which the position took place.\n    flag: An optional flag to associate with the posting.\n    meta: Optional metadata attached to the posting."}, "Price": {"title": "Price", "required": ["date", "currency", "amount"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Price"], "type": "string", "default": "Price"}, "currency": {"title": "Currency", "type": "string"}, "amount": {"$ref": "#/components/schemas/Amount"}}, "description": "A model representing a `beancount.core.data.Price`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    currency: The currency that is being priced.\n    amount: The value of the currency."}, "Query": {"title": "Query", "required": ["date", "name", "query_string"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Query"], "type": "string", "default": "Query"}, "name": {"title": "Name", "type": "string"}, "query_string": {"title": "Query String", "type": "string"}}, "description": "A model representing a `beancount.core.data.Query`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    name: The unique identifier for the query.\n    query_string: The SQL query string to run or be made available."}, "QueryColumn": {"title": "QueryColumn", "required": ["name", "type"], "type": "object", "properties": {"name": {"title": "Name", "type": "string"}, "type": {"title": "Type", "type": "string"}}, "description": "A model representing a single column from a query response.\n\nAttributes:\n    name: The name of the column.\n    type: The type of the column."}, "QueryResult": {"title": "QueryResult", "required": ["columns", "rows"], "type": "object", "properties": {"ty": {"title": "Ty", "enum": ["QueryResult"], "type": "string", "default": "QueryResult"}, "columns": {"title": "Columns", "type": "array", "items": {"$ref": "#/components/schemas/QueryColumn"}}, "rows": {"title": "Rows", "type": "array", "items": {"type": "object"}}}, "description": "A model representing the result from a beancount query.\n\nThe constructor of this model accepts the value returned from executing a\nbeancount query using the `beancount.query.query.run_query` function. The\nresult is a tuple of columns and rows which this model represents in the\n`columns` and `rows` fields accordingly. Like all models, any data types\nwhich can be parsed from the result into models are automatically parsed.\n\nAttributes:\n    columns: The columns denoting the name and types of the resulting data.\n    rows: The data rows returned from the query."}, "RealAccount": {"title": "RealAccount", "required": ["account", "balance", "children", "cur_map", "txn_postings"], "type": "object", "properties": {"ty": {"title": "Ty", "enum": ["RealAccount"], "type": "string", "default": "RealAccount"}, "account": {"title": "Account", "type": "string"}, "balance": {"$ref": "#/components/schemas/Inventory"}, "children": {"title": "Children", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/RealAccount"}}, "cur_map": {"title": "Cur Map", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/Inventory"}}, "txn_postings": {"$ref": "#/components/schemas/TxnPostings"}}, "description": "A model representing a `beancount.core.realize.RealAccount`.\n\nA `RealAccount` is represented as a dictionary in beancount which contains\nadditional attributes for describing details about the account. This model\nmatches those details, however, the dictinary representation of a\n`RealAccount` is moved to the dedicated `children` field.\n\nAttributes:\n    ty: A string literal identifying this model.\n    account: The account name.\n    balance: The balance of the account\n    children: All children that belong to this account.\n    cur_map: A map of currencies to their respective balances.\n    txn_postings: A list of directives in which this account appears."}, "Transaction": {"title": "Transaction", "required": ["date", "flag", "narration", "postings"], "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "date": {"title": "Date", "type": "string", "format": "date"}, "meta": {"$ref": "#/components/schemas/Meta"}, "ty": {"title": "Ty", "enum": ["Transaction"], "type": "string", "default": "Transaction"}, "flag": {"title": "Flag", "type": "string"}, "payee": {"title": "Payee", "type": "string"}, "narration": {"title": "Narration", "type": "string"}, "tags": {"title": "Tags", "uniqueItems": true, "type": "array", "items": {"type": "string"}}, "links": {"title": "Links", "uniqueItems": true, "type": "array", "items": {"type": "string"}}, "postings": {"title": "Postings", "type": "array", "items": {"$ref": "#/components/schemas/Posting"}}}, "description": "A model representing a `beancount.core.data.Transaction`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    flag: A flag denoting the state of the transaction.\n    payee: The payee of the transaction.\n    narration: A description of the transaction.\n    tags: A set of tag strings.\n    links: A set of link strings.\n    postings: A list of postings attached to this transaction."}, "TxnPosting": {"title": "TxnPosting", "required": ["txn", "posting"], "type": "object", "properties": {"ty": {"title": "Ty", "enum": ["TxnPosting"], "type": "string", "default": "TxnPosting"}, "txn": {"$ref": "#/components/schemas/Transaction"}, "posting": {"$ref": "#/components/schemas/Posting"}}, "description": "A model representing a `beancount.core.data.TxnPosting`.\n\nAttributes:\n    ty: A string literal identifying this model.\n    txn: The parent transaction instance.\n    posting: The posting instance."}, "TxnPostings": {"title": "TxnPostings", "type": "array", "items": {"anyOf": [{"$ref": "#/components/schemas/Balance"}, {"$ref": "#/components/schemas/Close"}, {"$ref": "#/components/schemas/Document"}, {"$ref": "#/components/schemas/Note"}, {"$ref": "#/components/schemas/Open"}, {"$ref": "#/components/schemas/Pad"}, {"$ref": "#/components/schemas/TxnPosting"}]}, "description": "A model representing the txnpostings found within RealAccount's."}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"type": "string"}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}}}